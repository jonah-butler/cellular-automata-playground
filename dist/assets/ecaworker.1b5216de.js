var u=Object.defineProperty;var c=(n,i,t)=>i in n?u(n,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[i]=t;var o=(n,i,t)=>(c(n,typeof i!="symbol"?i+"":i,t),t);(function(){"use strict";class n{constructor(t=90,e=700,s=500,l=!1,h="#fff",r="#000",a=1){o(this,"cell_size");o(this,"randomizeGen0");o(this,"one_color");o(this,"zero_color");o(this,"cells");o(this,"rule");o(this,"ruleset");o(this,"generations");o(this,"width");o(this,"ruleMap");this.cell_size=a,this.randomizeGen0=l,this.zero_color=h,this.one_color=r,this.cells=[],this.rule=t,this.generations=s,this.width=e,this.ruleset="",this.ruleMap={"000":null,"001":null,"010":null,"011":null,100:null,101:null,110:null,111:null}}_buildGeneration0(){if(this.randomizeGen0){const t=Array(this.width).fill(0);for(let e=0;e<t.length;e++)t[e]=Math.random()>.5?1:0;this.cells.push(t)}else{const t=Array(this.width).fill(0);t[Math.floor(this.width/2)]=1,this.cells.push(t)}}_convertRuleToBinary(){if(this.rule<0||this.rule>255||typeof this.rule!="number")throw new Error("value does not fit into a single byte");const t=this.rule.toString(2);this.ruleset=Array(8-t.length).fill(0).join("")+t,this._mapRuleset()}_mapRuleset(){Object.keys(this.ruleMap).forEach((t,e)=>{this.ruleMap[t]=parseInt(this.ruleset[e])})}_buildEca(){for(let t=0;t<this.generations;t++){const e=this.cells[t];this._validateSquares(e)}}_validateSquares(t){const e=[];for(let s=0;s<this.width;s++)if(s===0){const l=`${t[t.length-1]}${t[s]}${t[s+1]}`;e.push(this.ruleMap[l])}else if(s===t.length-1){const l=`${t[s-1]}${t[s]}${t[0]}`;e.push(this.ruleMap[l])}else{const l=`${t[s-1]}${t[s]}${t[s+1]}`;e.push(this.ruleMap[l])}this.cells.push(e)}_fillCanvas(t){for(let e=0;e<this.cells.length;e++)for(let s=0;s<this.cells[e].length;s++){let l;l=this.cells[e][s]===1?this.one_color:this.zero_color,t.fillStyle=l,t.fillRect(s*this.cell_size,e*this.cell_size,this.cell_size,this.cell_size)}}init(t){this._buildGeneration0(),this._convertRuleToBinary(),this._buildEca(),this._fillCanvas(t)}}onmessage=i=>{console.log(i);const t=i.data.canvas,e=JSON.parse(i.data.options);t.height=e.generations,t.width=e.width;const s=t.getContext("2d");new n(e.rule,e.width,e.generations,e.randomize,e.zeroColor,e.oneColor,e.cellSize).init(s),postMessage({status:"completed"})}})();
